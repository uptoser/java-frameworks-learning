<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration   PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--需要注意的是，MyBatis 配置项的顺序不能颠倒。如果颠倒了它们的顺序，那么在MyBatis启动阶段就会发生异常，导致程序无法运行。-->
<configuration>
  <!--采用properties文件方式引入变量-->
  <properties resource="jdbc.properties"/>
  <!--settings能深刻影响MyBatis底层的运行，但是在大部分情况下使用默认值便可以运行-->
  <settings>
    <!--所有映射器中配置缓存的全局开关 默认true-->
    <setting name="cacheEnabled" value="true" />
    <!--延迟加载的全局开关 在特定关联关系中可通过fetchType属性来覆盖 默认false-->
    <setting name="lazyLoadingEnabled" value="true" />
    <!--当启用时，对任意延迟属性的调用会使带有延迟加载属性的对象完整加载；反之，每种属性会按需加载 默认false-->
    <setting name="aggressiveLazyLoading" value="false" />
    <!--NONE表示取消自动映射；PARTIAL表示只会自动映射，没有定义嵌套结果集和映射结果集；FULL会自动映射任意复杂结果集(无论是否嵌套) 默认PARTIAL-->
    <setting name="autoMappingBehavior" value="PARTIAL" />
    <!--是否开启自动驼峰命名规则映射 默认false-->
    <setting name="mapUnderscoreToCamelCase" value="false" />
    <!--配置默认执行器。SIMPLE是普通执行器；REUSE会重用预处理语句(prepared statements)；BATCH执行器将重用语句并执行批量更新 默认SIMPLE-->
    <setting name="defaultExecutorType" value="SIMPLE" />
    <!--指定日志实现-->
    <setting name="logImpl" value="LOG4J" />
    <!--解决，查询返回结果含null没有对应字段值问题-->
    <setting name="callSettersOnNulls" value="true"/>
  </settings>
  <!-- 自定义别名(在MyBatis中别名不区分大小写) 也可以通过注解@Alias设置别名 -->
  <typeAliases>
<!--    <typeAlias alias="role" type="com.uptoser.ssm.mybatis.c1.builder.pojo.Role"/>-->
    <!--支持通过包扫描别名-->
    <package name="com.uptoser.ssm.mybatis.c2.config.pojo"/>
  </typeAliases>
  <!--注册类型处理器-->
  <typeHandlers>
    <!--注册后，当jdbcType和javaType能与MyTypeHandler对应的时候，它就会启动MyTypeHandler-->
    <!--还可以显式在mapper文件中启用typeHandler-->
<!--    <typeHandler jdbcType="VARCHAR" javaType="string"-->
<!--                 handler="com.uptoser.ssm.mybatis.c2.config.type_handler.MyTypeHandler"/>-->
    <package name="com.uptoser.ssm.mybatis.c2.config.type_handler"/>
  </typeHandlers>
  <!--对象工厂-->
<!--  <objectFactory type="com.uptoser.ssm.mybatis.c2.config.object_factory.MyObjectFactory">-->
<!--    <property name="prop1" value="value1"/>-->
<!--  </objectFactory>-->
  <!--插件-->
<!--  <plugins>-->
<!--    <plugin interceptor=""></plugin>-->
<!--  </plugins>-->
  <!-- 配置运行环境 -->
  <!--
  MyBatis的环境配置实际就是数据源的配置,MyBatis可以配置多种环境
  尽管可以配置多个环境，但是每个 SqlSessionFactory 实例只能选择一个环境，即每个数据库对应一个 SqlSessionFactory 实例
  所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个
  -->
  <environments default="development"><!--默认的环境id-->
    <environment id="development">
      <!-- 配置事务管理器  -->
      <!--如果开发者使用Spring+MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖MyBatis的事务管理器配置-->
      <!--JDBC使用JdbcTransactionFactory生成的JdbcTransaction对象实现。它是以JDBC的方式对数据库的提交和回滚进行操作。-->
<!--      <transactionManager type="JDBC"/>-->
<!--      <transactionManager type="MANAGED"/>-->
      <!-- 自定义事务工厂 -->
      <transactionManager type="com.uptoser.ssm.mybatis.c2.config.transaction_factory.MyTransactionFactory"/>
      <!-- 配置数据源 -->
          <!--属性type="POOLED"代表采用MyBatis内部提供的连接池方式-->
<!--      <dataSource type="POOLED">-->
<!--      <dataSource type="UNPOOLED"> UNPOOLED采用非数据库池的管理方式 每次被请求时打开和关闭连接-->
<!--      <dataSource type="JNDI">数据源JNDI的实现是为了能在如EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用-->
        <!-- 使用Dbcp自定义数据源工厂 -->
        <dataSource type="com.uptoser.ssm.mybatis.c2.config.datasource_factory.DbcpDataSourceFactory">
        <property name="driver" value="${database.driver}" />
        <property name="url" value="${database.url}" />
        <property name="username" value="${database.username}" />
        <property name="password" value="${database.password}" />
        <!--
        POOLED:除了上述提到的UNPOOLED的5种属性外，还可以使用更多属性来配置 POOLED 的数据源：
        • poolMaximumActiveConnections。 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值是 10。
        • poolMaximumIdleConnections。 任意时间可能存在的空闲连接数。
        • poolMaximumCheckoutTime。 在被强制返回之前，池中连接被检出（checked out）时间，默认值为20000 ms（即20 s）。
        • poolTimeToWait。 这是一个底层设置，如果获取连接花费相当长的时间，
        它会给连接池打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静地失败），默认值为20000 ms（即20 s）。
        • poolPingQuery。 发送到数据库的侦测查询，用来检验连接是否处在正常工作秩序中并准备接受请求。
        默认是“NO PING QUERY SET”，这会导致多数数据库驱动失败时带有一个恰当的错误消息。
        • poolPingEnabled。 是否启用侦测查询。若开启，也必须使用一个可执行的SQL语句设置 poolPingQuery 属性，默认值为false。
        • poolPingConnectionsNotUsedFor。 配置 poolPingQuery 的使用频度。
        其可以被设置成匹配具体的数据库连接超时时间，来避免不必要的侦测，
        默认值为0（即所有连接每一时刻都被侦测，当然仅当 poolPingEnabled 为 true 时适用）。
        -->
          </dataSource>
        </environment>
      </environments>
  <!--数据库厂商标识-->
  <!--
  当databaseIdProvider type属性被配置时，系统会优先取到和数据库配置一致的SQL。
  如果没有，则取没有databaseId的SQL，可以把它当作默认值。如果还是取不到，则会抛出异常

  property元素的属性name是数据库的名称，如果不确定如何填写，
  那么可以使用JDBC创建其数据库连接对象 Connection，
  然后通过代码 connection.getMetaData().getDatabaseProductName()获取。
  而属性value是它的一个别名，在MyBatis里可以通过这个别名标识一条SQL适用于哪种数据库运行

  在mapper中可以通过databaseId来指定哪种数据库使用哪条语句
  -->
<!--  <databaseIdProvider type="DB_VENDOR">-->
<!--    <property name="Oracle" value="oracle"/>-->
<!--      <property name="MYSQL" value="mysql"/>-->
<!--      <property name="DB2" value="db2"/>-->
<!--  </databaseIdProvider>-->
  <!--自定义数据库厂商标识-->
  <databaseIdProvider type="com.uptoser.ssm.mybatis.c2.config.databaseidprovider.MyDatabaseIdProvider">
    <property name="msg" value="自定义DatabaseIdProvider"/>
  </databaseIdProvider>
  <!-- 引入映射器 -->
  <mappers>
<!--      <mapper resource=""/>用文件路径引入映射器-->
<!--      <mapper class=""/>用类注册引入映射器-->
<!--      <mapper url=""/>-->
      <!--用包名引入映射器-->
      <package name="com.uptoser.ssm.mybatis.c2.config.mapper" />
  </mappers>

</configuration>